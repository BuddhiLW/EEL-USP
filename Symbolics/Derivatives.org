#+LATEX_COMPILER: xelatex
#+startup: latexpreview
#+startup: imagepreview

#+LATEX_HEADER: \hypersetup{colorlinks, allcolors=., colorlinks=true,linkcolor={blue!78!white}, urlcolor={purple}, filecolor={winered}}

#+LATEX_HEADER:\usepackage{xcolor} % to access the named colour LightGray
#+LATEX_HEADER:\definecolor{LightGray}{gray}{0.2}
#+LATEX_HEADER:\usepackage{minted}
#+LATEX_HEADER:\usemintedstyle{monokai}
#+LATEX_HEADER:\usepackage{fontspec}
#+LATEX_HEADER:\setmonofont{TeX Gyre Cursor}


* Setup
#+begin_src julia :session main :result :export both :tangle Derivatives.jl :eval no
  using Pkg;
  Pkg.activate("~/EEL-USP/Symbolics/")
  Pkg.add("Plots")
  Pkg.add("Symbolics")
  Pkg.add("StaticArrays")
#+end_src

#+RESULTS:

#+begin_src julia :session main :result :export both :tangle Derivatives.jl :eval no
  using Symbolics
  using Plots
  using StaticArrays
#+end_src

#+RESULTS:
: nothing

* Escrevendo as derivadas *simbólicas*
Vamos criar duas funções, a =derivative= e a =derivative_symb= as quais computam tanto o valor numérico, quanto retornam a expressão simbólica (literal) e uma função chamável em Julia.

Se não ficou claro, acompanhe o tutorial.


** Funções ajudantes
Criaremos as funções ajudantes, utilizando do pacote =Symbolics.jl=. Os detalhes do porquê essas funções são definitas dessa maneira vão além do escopo do tutorial, mas deixamos aqui como documentação.

#+begin_src julia :session main :result output :export both :tangle Derivatives.jl :eval no
  function derivative(exp, ξ)
        @variables y
        Dy=Differential(y)
        ϕe = exp(y) # (
        return first(substitute.(expand_derivatives(Dy(ϕe)),
                                  (Dict(y => ξ),)))
    end
#+end_src

#+RESULTS:
: derivative

#+begin_src julia :session main :result output :export both :tangle Derivatives.jl :eval no
  function derivative_symb(exp)
      @variables ξ
      Dξ=Differential(ξ)
      ϕe = exp(ξ) # (
      return (eval(build_function(expand_derivatives(Dξ(ϕe)), ξ)), expand_derivatives(Dξ(ϕe)))
  end
#+end_src

#+RESULTS:
: derivative_symb

** Como avaliar uma derivada
Consideraremos a função $f(x)$, a seguir, como exemplo,

\begin{equation}
\begin{aligned}
f(x) = 0.1 \, \sin(x) + 2\,\sin(x)^2 - x^2 
\end{aligned}
\end{equation}

Em Júlia,
#+begin_src julia :session main :result output :export both :tangle Derivatives.jl :eval no
f(x) = -x^2 + 0.1*sin(x) + 2*sin(x)^2
#+end_src

#+RESULTS:
: f


*** Avaliando *numericamente* a derivada
Avaliemos, como exemplo, a derivada em $x=1.3$. Isto é,

\begin{equation}
\begin{aligned}
\dfrac{\text{d}f}{\text{d}x}\biggr\rvert_{(x=1.3)} = g(1.3)
\end{aligned}
\end{equation}

Em que $g$ é uma função derivada.

De forma literal, a função é equivalente a:

\begin{equation}
\begin{aligned}
\dfrac{\text{d}f}{\text{d}x}\biggr\rvert_{(x=1.3)} &= \left[\dfrac{\text{d}(-x^2)}{\text{d}x} +  \dfrac{\text{d}(0.1 \, \sin(x))}{\text{d}x} + \dfrac{\text{d}(2\,\sin(x)^2)}{\text{d}x}  \right]\biggr\rvert_{(x=1.3)} \\
\Leftrightarrow  &=  \left[-2x +  0.1 \, \cos(x) + 2.\dfrac{\text{d}(\,\sin(x)^2)}{\text{d}\sin(x)}.\dfrac{\text{d}(\sin(x))}{\text{d}x}  \right]\biggr\rvert_{(x=1.3)}\\
\Leftrightarrow  \dfrac{\text{d}f}{\text{d}x}\biggr\rvert_{(x=1.3)}&= \left[-2x +  0.1 \, \cos(x) + 2.(2\sin(x)).\cos(x)  \right]\biggr\rvert_{(x=1.3)}\\
\end{aligned}
\end{equation}

Ou seja, gostaríamos de obter a função $g$, $g(x) =-2x +  0.1 \,
\cos(x) + 4\sin(x).\cos(x)$ com ferramentas computacionais.

Em =Julia=, temos,

#+begin_src julia :session main :result output :export both :tangle Derivatives.jl :eval no
derivative(f, 1.3)
#+end_src

#+RESULTS:
: -1.542247373494613

*** Avaliando a derivada *simbolicamente*
A vantagem de avaliarmos a derivada simbolicamente é que podemos obter
uma expressão literal para derivada e ao mesmo tempo definir uma
função em =Julia= a qual é equivalente a função derivada.

Isto é, definiremos a função $g$ em [[*Avaliando *numericamente* a derivada][Sec. numérica]], e saberemos qual é sua expressão simbólica.

A função =derivative_symb= nos retorna dois valores em uma tupla:

#+begin_src julia :session main :result output :export both :tangle Derivatives.jl :eval no
derivative_symb(f)
#+end_src

#+RESULTS:
: (var"#225#226"(), 0.1cos(ξ) + 4cos(ξ)*sin(ξ) - 2ξ)

O primeiro valor da tupla é como =Julia= representa uma função anônima
(explícita, mas sem nome) que pode ser passado para uma função com
nome, como por exemplo $g$.

O segundo valor é a expressão da derivada literal, utilizando-se da
regra da cadeia. Note que o símbolo $\xi$ foi utilizado para denotar a
variável, na expressão (em nossa $f$ a variável independente é $x$).

**** Definindo a função-derivada internamente em Julia

Tudo que precisamos fazer, agora, é definir a função-derivada $g$,
passando o primeiro argumento retornado de =derivative_symb=.

#+begin_src julia :session main :result output :export both :tangle Derivatives.jl :eval no
  g = first(derivative_symb(f))
#+end_src

#+RESULTS:
: #229

Avaliano $g(1.3)$, temos:

#+begin_src julia :session main :result output :export both :tangle Derivatives.jl :eval no
g(1.3)
#+end_src

#+RESULTS:
: -1.542247373494613

**** Obtendo uma expressão em $\LaTeX$ de $g$
Existe um pacote me =Julia= chamado =Latexify.jl=. Podemos utilizá-lo
para renderizar o segundo termo retornado de =derivative_symb=.

#+begin_src julia :session main :result output :export both :tangle Derivatives.jl :eval no
  Pkg.add("Latexify")
#+end_src

#+RESULTS:
: nothing


#+begin_src julia :session main :result output :export both :tangle Derivatives.jl :eval no
using Latexify
#+end_src

#+RESULTS:
: nothing

#+begin_src julia :session main :result output :export both :tangle Derivatives.jl :eval no
latexify(last(derivative_symb(f)))
#+end_src

#+RESULTS:
: \begin{equation}
:  - 2 \xi + 0.1 \cos\left( \xi \right) + 4 \cos\left( \xi \right) \sin\left( \xi \right)
: \end{equation}

Essa expressão, quando renderizada, fica:
 \begin{equation}
  - 2 \xi + 0.1 \cos\left( \xi \right) + 4 \cos\left( \xi \right) \sin\left( \xi \right)
 \end{equation}

* Tangente à uma curva $\mathbb{R}^2$ (plot)
* Outros materiais
** CalculusWithJulia
=CalculusWithJulia.jl= utiliza SymPy (interoperabilidade com a
biblioteca em Python) para derivar todos seus resultados.

Esse link https://docs.juliahub.com/CalculusWithJulia/AZHbv/0.0.5/ é
um ótimo recurso para se aprender cálculo, utilizando-se de Julia.
** Manim
Biblioteca de animação em Python utilizado para explicar matemática,
em vídeo. Inicialmente, desenvolvido por [[https://www.youtube.com/c/3blue1brown][3Blue1Brown]].

